w  <- df[i,col_Well]
p  <- df[i,col_Pos]
xy <- dfCoords[dfCoords$wellnum == w & dfCoords$posnum == p, c("X", "Y")]
df[i, "heatX"] <- xy[1,"X"]
df[i, "heatY"] <- xy[1,"Y"]
df[i, "hmsymbols"] <- ifelse(df[i,col_QC], hmsymbols["ok"], hmsymbols["rejected"])
}
df
}
h <- addHeatmapCoordinates(mydata, hmcoords, "Metadata_wellNum", "Metadata_posNum")
names(h)
View(h)
plot(h$heatX, h$heatY)
mydata <- read.csv("c:/hugo/image_concat.csv")
mydata$htm_qc <- TRUE
mydata <- read.csv("c:/hugo/image_concat.csv")
mydata$htm_qc <- TRUE
colWellNum <- "Metadata_wellNum"
colPosNum <- "Metadata_posNum"
colPlate <- "Metadata_platePath"
measurement <- "Count_cell_final"
hmsymbolsize <- 1
hmcoords <- heatmapCoord(WellX = 24,
WellY = 16,
PosX = 2,
PosY = 2,
subposjitter = 0.2)
mydata <- addHeatmapCoordinates(mydata, hmcoords, colWellNum, colPosNum)
g <- ggplot(mydata, aes_string("heatX", "heatY", color = measurement))
g <- g + geom_point(size=hmsymbolsize, shape=mydata$hmsymbols) + scale_colour_gradientn(colours = terrain.colors(10)) +
ggtitle(colPlate) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
ggplotly(g)
runApp()
runApp()
runApp()
h <- datahm()
h <- isolate(datahm())
runApp()
isolate(temp())
View(hmcoords)
runApp()
runApp()
isolate(hm1())
h1 <- isolate(hm1())
h2 <- isolate(hm2())
View(h1)
runApp()
runApp()
runApp()
runApp()
hm1 <- isolate(hm1())
hm2 <- isolate(hm2())
runApp()
h <- addHeatmapCoordinates(data, hm1, "Metadata_wellNum", "Metadata_posNum")
data <- read.csv("c:/hugo/image_concat.csv")
hm1 <- isolate(hm1())
hm2 <- isolate(hm2())
h <- addHeatmapCoordinates(data, hm1, "Metadata_wellNum", "Metadata_posNum")
df <- read.csv("c:/hugo/image_concat.csv")
h <- addHeatmapCoordinates(df, hm1, "Metadata_wellNum", "Metadata_posNum")
"Metadata_wellNum" %in% names(df)
"Metadata_posNum" %in% names(df)
df$heatX <- NA
df$heatY <- NA
df$hmsymbols <- hmsymbols["ok"]
df$heatX <- NA
df$heatY <- NA
df$hmsymbols <- hmsymbols["ok"]
for(i in 1:nrow(df)){
w  <- df[i,"Metadata_wellNum"]
p  <- df[i,"Metadata_posNum"]
xy <- hm1[hm1$wellnum == w & hm1$posnum == p, c("X", "Y")]
df[i, "heatX"] <- xy[1,"X"]
df[i, "heatY"] <- xy[1,"Y"]
df[i, "hmsymbols"] <- ifelse(df[i,"htm_qc"], hmsymbols["ok"], hmsymbols["rejected"])
}
df[i,"Metadata_wellNum"]
df[i,"Metadata_posNum"]
hm1[hm1$wellnum == w & hm1$posnum == p, c("X", "Y")]
df[i, "heatX"]
xy[1,"X"]
df[i, "heatY"]
xy[1,"Y"]
df[i, "hmsymbols"]
df[i,"htm_qc"]
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- TRUE
hm1 <- isolate(hm1())
hm2 <- isolate(hm2())
h <- addHeatmapCoordinates(df, hm1, "Metadata_wellNum", "Metadata_posNum")
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- TRUE
df$heatX <- NA
df$heatY <- NA
df$hmsymbols <- hmsymbols["ok"]
for(i in 1:nrow(df)){
w  <- df[i,"Metadata_wellNum"]
p  <- df[i,"Metadata_posNum"]
xy <- hm1[hm1$wellnum == w & hm1$posnum == p, c("X", "Y")]
df[i, "heatX"] <- xy[1,"X"]
df[i, "heatY"] <- xy[1,"Y"]
df[i, "hmsymbols"] <- ifelse(df[i,"htm_qc"], hmsymbols["ok"], hmsymbols["rejected"])
}
df[i,"htm_qc"]
View(df)
"htm_qc" %in% names(df)
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- TRUE
"htm_qc" %in% names(df)
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- rep(TRUE, nrow(df))
df$heatX <- NA
df$heatY <- NA
df$hmsymbols <- hmsymbols["ok"]
for(i in 1:nrow(df)){
w  <- df[i,"Metadata_wellNum"]
p  <- df[i,"Metadata_posNum"]
xy <- hm1[hm1$wellnum == w & hm1$posnum == p, c("X", "Y")]
df[i, "heatX"] <- xy[1,"X"]
df[i, "heatY"] <- xy[1,"Y"]
df[i, "hmsymbols"] <- ifelse(df[i,"htm_qc"], hmsymbols["ok"], hmsymbols["rejected"])
}
i
df[i,"htm_qc"]
"htm_qc" %in% names/df
"htm_qc" %in% names(df)
df <- read.csv("c:/hugo/image_concat.csv")
"htm_qc" %in% names(df)
df$hmt_qc <- rep(TRUE, nrow(df))
"htm_qc" %in% names(df)
names(df)
summary(df$htm_qc)
# Initialize variables
hmsymbols <- c(ok=15, rejected=4)   # Symbols for heatmaps [squares and crosses]
plsymbols <- c(ok=16, rejected=4)   # Symbols for heatmaps [circles and crosses]
col_QC <- "htm_qc"                  # Name of the column with QC [TRUE/FALSE i.e. OK/Rejected]
# Generate Plotly scatter plot
scatterPlot <- function(df, x, y){
g <- ggplot(df, aes_string(x, y))
g <- g + geom_point()
ggplotly(g)
}
# Generate Plotly jitter plot
jitterPlot <- function(df, x, y){
g <- ggplot(df, aes_string(x, y))
g <- g + geom_jitter()
ggplotly(g)
}
# Generate Plotly heatmap
heatmapPlot <- function(df, measurement, batch, nrows, ncolumns, symbolsize){
g <- ggplot(df, aes_string("heatX", "heatY", color = measurement))
g <- g + geom_point(size=symbolsize, shape=df$hmsymbols) + scale_colour_gradientn(colours = terrain.colors(10)) +
ggtitle(batch) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:ncolumns) +
scale_y_continuous(breaks = 1:nrows, labels = LETTERS[nrows:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
ggplotly(g)
}
# Can open multiple files at once
# filePath is an array of character strings
OpenInFiji <- function(filePath, FijiPath = "C:\\Fiji.app\\ImageJ-win64.exe"){
filePath <- gsub("\\\\", "/", filePath)
# Generate the expression opening each image
fileexpression <- ""
for (path in filePath){
fileexpression <- paste0(fileexpression, " -eval \"open('/", path, "')\"")
}
# Evoke Fiji with the expression compiled above
cmd <- paste0("\"", FijiPath, "\" -debug", fileexpression)
system(cmd)
}
# Generate coordinates for heatmap
heatmapCoord <- function(WellX, WellY, PosX, PosY, subposjitter = 0.2){
numWells <- WellX * WellY
numSubpos <- PosX * PosY
# Map well numbers to a plate layout
wellLayout <- matrix(1:numWells, WellY, WellX, byrow = TRUE, dimnames = list(LETTERS[1:WellY], 1:WellX))
# (x,y) coordinates for all well centers
WellCenters <- data.frame(wellnum = integer(), X = integer(), Y = integer())
for (i in 1:WellY){
for (j in 1:WellX){
temp <- which(wellLayout == wellLayout[i,j], arr.ind=TRUE)
WellCenters <- rbind(WellCenters,
data.frame(wellnum = wellLayout[i,j], X = temp[1,"col"], Y = -temp[1,"row"]+WellY+1)
)
}
}
# Map subposition array
posLayout <- matrix(1:numSubpos, PosY, PosX, byrow = TRUE, dimnames = list(LETTERS[1:PosY], 1:PosX))
# (x,y) coordinates for each subposition cluster.
PosCenters <- data.frame(posnum = integer(), X = numeric(), Y = numeric())
for (u in 1:PosY){
for (v in 1:PosX){
temp <- which(posLayout == posLayout[u,v], arr.ind=TRUE)
PosCenters <- rbind(PosCenters,
data.frame(posnum = posLayout[u,v], X = temp[1,"col"]-0.5-PosX/2, Y = -temp[1,"row"]+PosY/2+0.5)
)
}
}
PosCenters[, c("X", "Y")] <- PosCenters[, c("X", "Y")] * subposjitter
# (x,y) coordinates for all images in a plate
temp <- data.frame(wellnum = integer(), posnum = integer(), X = numeric(), Y = numeric())
for(w in 1:numWells){
localcenter <- do.call("rbind", replicate(numSubpos, WellCenters[w,], simplify = FALSE))
localcenter$posnum <- PosCenters$posnum
localcenter$X <- localcenter$X + PosCenters$X
localcenter$Y <- localcenter$Y + PosCenters$Y
temp <- rbind(temp, localcenter)
}
row.names(temp) <- NULL
temp
}
# Annotate a data frame with coordinates for heatmap plotting
addHeatmapCoordinates <- function(df, dfCoords, col_Well, col_Pos){
df$heatX <- NA
df$heatY <- NA
df$hmsymbols <- hmsymbols["ok"]
for(i in 1:nrow(df)){
w  <- df[i,col_Well]
p  <- df[i,col_Pos]
xy <- dfCoords[dfCoords$wellnum == w & dfCoords$posnum == p, c("X", "Y")]
df[i, "heatX"] <- xy[1,"X"]
df[i, "heatY"] <- xy[1,"Y"]
df[i, "hmsymbols"] <- ifelse(df[i,col_QC], hmsymbols["ok"], hmsymbols["rejected"])
}
df
}
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- rep(TRUE, nrow(df))
summary(df$htm_qc)
names(df)
df[1:5, "htm_qc"]
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- rep(TRUE, nrow(df))
df$hmt_qc <- TRUE
df[1:5, "htm_qc"]
if(1) "ok"
if(3) "ok"
if(0) "ok"
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- 1
df$heatX <- NA
df$heatY <- NA
df$hmsymbols <- hmsymbols["ok"]
for(i in 1:nrow(df)){
w  <- df[i,"Metadata_wellNum"]
p  <- df[i,"Metadata_posNum"]
xy <- hm1[hm1$wellnum == w & hm1$posnum == p, c("X", "Y")]
df[i, "heatX"] <- xy[1,"X"]
df[i, "heatY"] <- xy[1,"Y"]
df[i, "hmsymbols"] <- ifelse(df[i,"htm_qc"], hmsymbols["ok"], hmsymbols["rejected"])
}
hm1 <- heatmapCoord(24, 16, 2, 2)
df <- read.csv("c:/hugo/image_concat.csv")
df$hmt_qc <- 1
hm1 <- heatmapCoord(24, 16, 2, 2)
df$heatX <- NA
df$heatY <- NA
df$hmsymbols <- hmsymbols["ok"]
for(i in 1:nrow(df)){
w  <- df[i,"Metadata_wellNum"]
p  <- df[i,"Metadata_posNum"]
xy <- hm1[hm1$wellnum == w & hm1$posnum == p, c("X", "Y")]
df[i, "heatX"] <- xy[1,"X"]
df[i, "heatY"] <- xy[1,"Y"]
df[i, "hmsymbols"] <- ifelse(df[i,"htm_qc"], hmsymbols["ok"], hmsymbols["rejected"])
}
"htm_qc" %in% names(df)
df <- read.csv("c:/hugo/image_concat.csv")
df$hmtqc <- 1
"htmqc" %in% names(df)
names(df)
df[1,"htmqc"]
df[1:10,304]
mydata <- read.csc("c:/myplate_01/dataset.csv")
mydata <- read.csv("c:/myplate_01/dataset.csv")
rep(1:24,16)
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
library(ggplot2)
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(scale_colour_gradientn(colours = RdYlBu(10)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(scale_colour_gradientn(colours = RdYlBu(10)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g <- g + geom_point(scale_colour_gradientn(colours = RdYlBu(10))) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(scale_colour_gradientn(colours = RdYlBu) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(scale_colour_gradientn(colours = RdYlBu)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(scale_colour_gradient(colours = RdYlBu)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(scale_colour_gradient(colours=rainbow(4))) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(scale_colour_gradient(colours=rainbow(4)))
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
scale_colour_gradientn(colours=rainbow(4)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
scale_colour_gradientn(colours=RdYlBu(4)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
scale_colour_gradientn(colours=RdYlBu +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
scale_colour_gradientn(colours=RdYlBu) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
library(RColorBrewer)
str(RdYlBu)
str(Spectral)
library(RColorBrewer)
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
scale_colour_gradientn(colours==rainbow_hcl(3)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
scale_colour_gradientn(colours=rainbow_hcl(3)) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
darkblue
RColorBrewer::brewer.pal(10, "Spectral")
RColorBrewer::brewer.pal(10, "RdYlBu")
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(color=RColorBrewer::brewer.pal(10, "RdYlBu")) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point(color=RColorBrewer::brewer.pal(1, "RdYlBu")) +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_color_brewer(palette="RdYlBu")
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_color_brewer(palette=RColorBrewer::brewer.pal(1, "RdYlBu"))
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_color_brewer(palette="Dark2")
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_fill_manual(RColorBrewer::brewer.pal(10, "RdYlBu"))
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_fill_manual(RColorBrewer::brewer.pal(10, "Spectral"))
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank())
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) + scale_color_brewer(palette="Dark2")
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_color_gradient2(midpoint=mid, low="blue", mid="white", high="red", space ="Lab" )
g
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_color_gradient2(midpoint=mean(mydata$Count_cell_all), low="blue", mid="white", high="red", space ="Lab" )
g
scale_color_gradient2(midpoint=mean(mydata$Count_cell_all), low="blue", mid="white", high="red", space ="Lab" )
g <- ggplot(mydata, aes_string(rep(1:24,16), rep(1:16, each=24), color = "Count_cell_all"))
g <- g + geom_point() +
theme(panel.grid = element_blank()) +
scale_x_continuous(breaks=1:24) +
scale_y_continuous(breaks = 1:16, labels = LETTERS[16:1]) +
theme(axis.title.x=element_blank(), axis.title.y=element_blank()) +
scale_color_gradient2(midpoint=mean(mydata$Count_cell_all), low="blue", mid="white", high="red")
g
source("run.r")
source("run.r")
rm(list=ls());source("run.r")
rm(list=ls());source("run.r")
rm(list=ls());source("run.r")
rm(list=ls());source("run.r")
runApp()
class(HTMdata)
isolate(HTMdata)
rm(list=ls());source("run.r")
rm(list=ls());source("run.r")
HTMdata()
runApp()
rm(list=ls());source("run.r")
rm(list=ls());source("run.r")
